{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","constants.ts","api/comments.ts","components/ErrorIcon.tsx","components/NewCommentForm.tsx","components/CommentsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/posts.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","_ref","posts","openDetails","selectedPost","closeCommentList","isCommentsListtHidden","length","_jsxs","children","_jsx","className","map","post","id","title","type","onClick","Loader","BASE_URL","request","url","delay","data","arguments","undefined","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","json","ErrorTypes","CommentFormErrors","client","getPostComments","postId","concat","addComment","comment","ErrorIcon","NewCommentForm","setComments","setErrorType","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","setComment","_useState7","_useState8","hasName","setHasName","_useState9","_useState10","hasEmail","setHasEmail","_useState11","_useState12","isEmailValid","setIsEmailValid","_useState13","_useState14","hasComment","setHasComment","_useState15","_useState16","isCommentAdding","setIsCommentAdding","addNewComment","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newComment","fetchedComment","wrap","_context","prev","next","sent","prevComments","_toConsumableArray","t0","ADD","finish","stop","handleFormSubmit","event","isNotValid","preventDefault","String","toLowerCase","match","onSubmit","htmlFor","placeholder","classNames","value","onChange","currentTarget","NAME","NOTVALID","EMAIL","COMMENT","CommentsList","comments","handleDeleteComment","_ref2","commentId","filter","_ref3","DELETE","_x","apply","_Fragment","href","PostDetails","errorType","isFetching","openCommentsForm","isCommentFormOpen","errorTypes","COMMENTS","includes","UserSelector","users","selected","onSelect","getUsersPosts","setIsCommentsListHidden","isVisible","setIsVisible","selectRef","useRef","handleClickOutside","target","current","useEffect","document","addEventListener","removeEventListener","ref","role","user","handleSelectUser","getPostsByUserId","userId","App","setUsers","setPosts","isLoaderVisible","setIsLoaderVisible","setIsCommentFormOpen","isPostlistVisible","setIsPostListVisible","isCommentsFetching","setIsCommentsFetching","setSelectedPost","_useState17","_useState18","_useState19","_useState20","selectedUser","setSelectedUser","_useState21","_useState22","loadingDataErrors","USERS","POSTS","getUsersFromServer","fetchedUsers","getPostsByUserIdFromServer","_callee2","fetchedPosts","_context2","getCommentsByPostIdFromServer","_callee3","fetchedComments","_context3","_x2","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4cfd0623.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  isCommentsListtHidden: boolean;\n  openDetails: (post: Post) => void;\n  closeCommentList: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  openDetails,\n  selectedPost,\n  closeCommentList,\n  isCommentsListtHidden,\n}) => {\n  if (!posts.length) {\n    return (\n      <div\n        className=\"notification is-warning\"\n        data-cy=\"NoPostsYet\"\n      >\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {isCommentsListtHidden && (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => openDetails(post)}\n                  >\n                    Open\n                  </button>\n                )}\n\n                {!isCommentsListtHidden && (\n                  post.id === selectedPost?.id\n                    ? (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link is-light\"\n                        onClick={() => closeCommentList(true)}\n                      >\n                        Close\n                      </button>\n                    ) : (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link is-light\"\n                        onClick={() => openDetails(post)}\n                      >\n                        Open\n                      </button>\n                    ))}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: object | null = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: object) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: object) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorTypes {\n  ADD = 'Something went wrong on comment add!',\n  POSTS = 'Something went wrong on posts load!',\n  USERS = 'Something went wrong on users load!',\n  DELETE = 'Something went wrong on comment delete!',\n  COMMENTS = 'Something went wrong on comments load!',\n}\n\nexport enum CommentFormErrors {\n  NAME = 'Name is required',\n  EMAIL = 'Email is required',\n  COMMENT = 'Enter some text',\n  NOTVALID = 'Enter correct e-mail',\n}\n\nexport const EMAIL_REGEXP = (userEmail: string) => {\n  return String(userEmail)\n    .toLowerCase()\n    .match(\n      // eslint-disable-next-line\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\n// eslint-disable-next-line\nexport const addComment = (comment: object) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import React from 'react';\n\nexport const ErrorIcon: React.FC = () => (\n  <span\n    className=\"icon is-small is-right has-text-danger\"\n    data-cy=\"ErrorIcon\"\n  >\n    <i className=\"fas fa-exclamation-triangle\" />\n  </span>\n);\n","import React, { FormEvent, useCallback, useState } from 'react';\nimport classNames from 'classnames';\nimport { addComment } from '../api/comments';\nimport { CommentFormErrors, EMAIL_REGEXP, ErrorTypes } from '../constants';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { ErrorIcon } from './ErrorIcon';\n\ntype Props = {\n  post: Post | null;\n  setErrorType: React.Dispatch<React.SetStateAction<ErrorTypes | null>>;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  post,\n  setComments,\n  setErrorType,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [hasName, setHasName] = useState(true);\n  const [hasEmail, setHasEmail] = useState(true);\n  const [isEmailValid, setIsEmailValid] = useState(true);\n  const [hasComment, setHasComment] = useState(true);\n  const [isCommentAdding, setIsCommentAdding] = useState(false);\n\n  const addNewComment = useCallback(async () => {\n    setIsCommentAdding(true);\n\n    try {\n      const newComment = {\n        postId: post?.id,\n        name,\n        email,\n        body: comment,\n      };\n\n      const fetchedComment = await addComment(newComment);\n\n      setComment('');\n      setComments(prevComments => [...prevComments, fetchedComment]);\n    } catch (error) {\n      setErrorType(ErrorTypes.ADD);\n    } finally {\n      setIsCommentAdding(false);\n      setHasName(true);\n      setHasEmail(true);\n      setHasComment(true);\n    }\n  }, [name, email, comment]);\n\n  const handleFormSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    let isNotValid;\n\n    if (!name) {\n      setHasName(false);\n      isNotValid = true;\n    }\n\n    if (!email) {\n      setHasEmail(false);\n      isNotValid = true;\n    }\n\n    if (!EMAIL_REGEXP(email)) {\n      setIsEmailValid(false);\n      isNotValid = true;\n    }\n\n    if (!comment) {\n      setHasComment(false);\n      isNotValid = true;\n    }\n\n    if (isNotValid) {\n      return;\n    }\n\n    addNewComment();\n  };\n\n  const handleClearForm = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n    setHasName(true);\n    setHasEmail(true);\n    setHasComment(true);\n    setIsEmailValid(true);\n  };\n\n  const handleNameChange = (event: FormEvent<HTMLInputElement>) => {\n    setName(event.currentTarget.value);\n    setHasName(true);\n  };\n\n  const handleEmailChange = (event: FormEvent<HTMLInputElement>) => {\n    setEmail(event.currentTarget.value);\n    setHasEmail(true);\n    setIsEmailValid(true);\n  };\n\n  const handleCommentChange = (event: FormEvent<HTMLTextAreaElement>) => {\n    setComment(event.currentTarget.value);\n    setHasComment(true);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': !hasName,\n            })}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!hasName && (\n            <ErrorIcon />\n          )}\n        </div>\n\n        {!hasName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {CommentFormErrors.NAME}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': !hasEmail,\n            })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {(!hasEmail || !isEmailValid) && (\n            <ErrorIcon />\n          )}\n        </div>\n\n        {(!hasEmail || !isEmailValid) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {!hasEmail ? CommentFormErrors.EMAIL : CommentFormErrors.NOTVALID}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': !hasComment,\n            })}\n            value={comment}\n            onChange={handleCommentChange}\n          />\n        </div>\n\n        {!hasComment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {CommentFormErrors.COMMENT}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': isCommentAdding,\n            })}\n            onClick={handleFormSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handleClearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { deleteComment } from '../api/comments';\nimport { ErrorTypes } from '../constants';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comments: Comment[];\n  setErrorType: React.Dispatch<React.SetStateAction<ErrorTypes | null>>;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n};\n\nexport const CommentsList: React.FC<Props> = ({\n  comments,\n  setComments,\n  setErrorType,\n}) => {\n  const handleDeleteComment = async (commentId: number) => {\n    try {\n      setComments(prevComments => prevComments\n        .filter(({ id }) => id !== commentId));\n      await deleteComment(commentId);\n    } catch (error) {\n      setErrorType(ErrorTypes.DELETE);\n    }\n  };\n\n  if (!comments.length) {\n    return (\n      <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n        No comments yet\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n      {comments.map(comment => (\n        <article\n          key={comment.id}\n          className=\"message is-small\"\n          data-cy=\"Comment\"\n        >\n          <div className=\"message-header\">\n            <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n              {comment.name}\n            </a>\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => handleDeleteComment(comment.id)}\n            >\n              delete button\n            </button>\n          </div>\n\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {comment.body}\n          </div>\n        </article>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { Comment } from '../types/Comment';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { CommentsList } from './CommentsList';\nimport { ErrorTypes } from '../constants';\n\ntype Props = {\n  post: Post | null;\n  errorType: ErrorTypes | null;\n  comments: Comment[];\n  isFetching: boolean;\n  isCommentFormOpen: boolean;\n  setErrorType: React.Dispatch<React.SetStateAction<ErrorTypes | null>>;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n  openCommentsForm: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  comments,\n  errorType,\n  isFetching,\n  setComments,\n  setErrorType,\n  openCommentsForm,\n  isCommentFormOpen,\n}) => {\n  const handleOpenCommentForm = () => {\n    openCommentsForm(true);\n  };\n\n  const errorTypes: ErrorTypes[] = [\n    ErrorTypes.ADD,\n    ErrorTypes.DELETE,\n    ErrorTypes.COMMENTS,\n  ];\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isFetching && (\n            <Loader />\n          )}\n\n          {(errorType && errorTypes.includes(errorType)) && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              { errorType }\n            </div>\n          )}\n\n          {(errorType !== ErrorTypes.COMMENTS) && (\n            <CommentsList\n              comments={comments}\n              setErrorType={setErrorType}\n              setComments={setComments}\n            />\n          )}\n\n          {!isCommentFormOpen && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleOpenCommentForm}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isCommentFormOpen && (\n          <NewCommentForm\n            post={post}\n            setComments={setComments}\n            setErrorType={setErrorType}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selected: User | null;\n  getUsersPosts: (userId: number) => void;\n  onSelect: React.Dispatch<React.SetStateAction<User | null>>;\n  setIsCommentsListHidden: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selected,\n  onSelect,\n  getUsersPosts,\n  setIsCommentsListHidden,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const selectRef = useRef(null);\n\n  const handleSelectUser = (user: User) => {\n    onSelect(user);\n    setIsVisible(false);\n    getUsersPosts(user.id);\n    setIsCommentsListHidden(true);\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (event.target !== selectRef.current && isVisible) {\n      setIsVisible(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [isVisible]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n      ref={selectRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsVisible(true)}\n        >\n          <span>\n            {selected\n              ? selected.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isVisible && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => {\n              return (\n                <a\n                  key={user.id}\n                  href={`#user-${user.id}`}\n                  className={classNames('dropdown-item', {\n                    'is-active': user.id === selected?.id,\n                  })}\n                  onClick={() => handleSelectUser(user)}\n                >\n                  {user.name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostsByUserId = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { ErrorTypes } from './constants';\nimport { getPostsByUserId } from './api/posts';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { getPostComments } from './api/comments';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoaderVisible, setIsLoaderVisible] = useState(false);\n  const [isCommentFormOpen, setIsCommentFormOpen] = useState(false);\n  const [isPostlistVisible, setIsPostListVisible] = useState(false);\n  const [isCommentsFetching, setIsCommentsFetching] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [errorType, setErrorType] = useState<ErrorTypes | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isCommentsListtHidden, setIsCommentsListHidden] = useState(true);\n\n  const loadingDataErrors = [ErrorTypes.USERS, ErrorTypes.POSTS];\n\n  const getUsersFromServer = async () => {\n    try {\n      const fetchedUsers = await getUsers();\n\n      setUsers(fetchedUsers);\n    } catch (error) {\n      setErrorType(ErrorTypes.USERS);\n    }\n  };\n\n  const getPostsByUserIdFromServer = async (userId: number) => {\n    setIsLoaderVisible(true);\n    setIsPostListVisible(false);\n\n    try {\n      const fetchedPosts = await getPostsByUserId(userId);\n\n      setPosts(fetchedPosts);\n      setIsPostListVisible(true);\n    } catch (error) {\n      setErrorType(ErrorTypes.POSTS);\n      setIsPostListVisible(false);\n    } finally {\n      setIsLoaderVisible(false);\n    }\n  };\n\n  const getCommentsByPostIdFromServer = async (postId: number) => {\n    setIsCommentsFetching(true);\n    setIsCommentsListHidden(false);\n\n    try {\n      const fetchedComments = await getPostComments(postId);\n\n      setComments(fetchedComments);\n      setIsPostListVisible(true);\n    } catch (error) {\n      setErrorType(ErrorTypes.COMMENTS);\n    } finally {\n      setIsCommentsFetching(false);\n    }\n  };\n\n  const handleOpenDetails = (post: Post) => {\n    setSelectedPost(post);\n    getCommentsByPostIdFromServer(post.id);\n    setIsCommentFormOpen(false);\n  };\n\n  useEffect(() => {\n    getUsersFromServer();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selected={selectedUser}\n                  onSelect={setSelectedUser}\n                  getUsersPosts={getPostsByUserIdFromServer}\n                  setIsCommentsListHidden={setIsCommentsListHidden}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoaderVisible && (\n                  <Loader />\n                )}\n\n                {(errorType && loadingDataErrors.includes(errorType)) && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorType}\n                  </div>\n                )}\n\n                {isPostlistVisible && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    openDetails={handleOpenDetails}\n                    closeCommentList={setIsCommentsListHidden}\n                    isCommentsListtHidden={isCommentsListtHidden}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {!isCommentsListtHidden && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar', {\n                  'Sidebar--open': selectedPost,\n                },\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                  comments={comments}\n                  errorType={errorType}\n                  setErrorType={setErrorType}\n                  setComments={setComments}\n                  isFetching={isCommentsFetching}\n                  isCommentFormOpen={isCommentFormOpen}\n                  openCommentsForm={setIsCommentFormOpen}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}